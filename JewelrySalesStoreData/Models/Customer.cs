// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace JewelrySalesStoreData.Models;

public partial class Customer
{
    public Guid CustomerId { get; set; }

    public Customer()
    {
        CustomerId = Guid.NewGuid();
    }

    [Required]
    [Display(Name = "First Name")]
    public string CustomerFirstName { get; set; }

    [Required]
    [Display(Name = "Last Name")]
    public string CustomerLastName { get; set; }

    [Required]
    [Display(Name = "Gender")]
    public bool CustomerGender { get; set; }

    private DateTime? _birthDate;

    [Required]
    [Display(Name = "Birth Date")]
    [DisplayFormat(DataFormatString = "{0:dd-MM-yyyy}", ApplyFormatInEditMode = false)]
    [DataType(DataType.Date)]
    public DateTime? CustomerBirthDate
    { get; set; }
    //get => _birthDate;
    //set
    //{
    //    if (value.HasValue && value > DateTime.Now)
    //    {
    //        throw new ArgumentException("Birth Date cannot be in the future.");
    //    }
    //    _birthDate = value;
    //}

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        if (CustomerBirthDate > DateTime.Today)
        {
            yield return new ValidationResult(
                "Birth Date cannot be in the future.",
                new[] { nameof(CustomerBirthDate) });
        }
    }
    [Required]
    [Display(Name = "Phone")]
    [RegularExpression(@"^\d{10}$", ErrorMessage = "Phone number must be 10 digits.")]
    public string CustomerPhone { get; set; }

    [Required]
    [Display(Name = "Email")]
    public string CustomerEmail { get; set; }

    [Required]
    [Display(Name = "Address")]
    public string CustomerAddress { get; set; }

    [Display(Name = "Points")]
    [Range(0, double.MaxValue)]
    public double? CustomerPoint { get; set; }

    [Required]
    [Display(Name = "VIP Status")]
    public bool CustomerVipStatus { get; set; }

    [Display(Name = "Notes")]
    public string Notes { get; set; }
    public virtual ICollection<Order> Orders { get; set; } = new List<Order>();
}