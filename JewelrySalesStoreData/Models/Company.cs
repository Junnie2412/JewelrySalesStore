// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace JewelrySalesStoreData.Models
{
    public partial class Company
    {
        public Guid CompanyId { get; set; }

        public Company()
        {
            CompanyId = Guid.NewGuid();
        }

        [Required(ErrorMessage = "Company name is required.")]
        [Display(Name = "Company Name")]
        public string CompanyName { get; set; }

        [Required(ErrorMessage = "Company address is required.")]
        [Display(Name = "Company Address")]
        public string CompanyAddress { get; set; }

        [Display(Name = "Description")]
        public string CompanyDescription { get; set; }

        [Required(ErrorMessage = "Company phone number is required.")]
        [Display(Name = "Company Phone")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Phone number must be 10 digits.")]
        public string CompanyPhone { get; set; }

        [Url(ErrorMessage = "Invalid URL format.")]
        public string Website { get; set; }

        private DateTime? _foundationDate;

        [Display(Name = "Foundation Date")]
        [DisplayFormat(DataFormatString = "{0:dd-MM-yyyy}", ApplyFormatInEditMode = false)]
        public DateTime? FoundationDate
        {
            get => _foundationDate;
            set
            {
                if (value.HasValue && value > DateTime.Now)
                {
                    throw new ArgumentException("Foundation date cannot be in the future.");
                }
                _foundationDate = value;
            }
        }

        [Required(ErrorMessage = "Company email is required.")]
        [Display(Name = "Company Email")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Display(Name = "Is Active")]
        public bool IsActive { get; set; }

        [Display(Name = "Notes")]
        public string Notes { get; set; }

        public virtual ICollection<Order> Orders { get; set; } = new List<Order>();
    }
}
